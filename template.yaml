AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  callout
Parameters:
  ContactFlowArn:
    Type: String
  SourcePhoneNumber:
    Type: String
Globals:
  Function:
    Timeout: 180
    Tracing: Active
    Runtime: python3.7  
Resources:
  CalloutFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: send_call.lambda_handler
      CodeUri: call_out/
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
               - connect:StartOutboundVoiceContact
              Resource: "*"
      Environment:
        Variables:
          ContactFlowArn: !Ref ContactFlowArn
          SourcePhoneNumber: !Ref SourcePhoneNumber

  LibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: lib
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete  
      
  CalloutSQSQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: start_call_out_flow.lambda_handler
      CodeUri: call_out/
      Layers:
        - !Ref LibLayer      
      Timeout: 30
      ReservedConcurrentExecutions: 1
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName:
              !GetAtt [ CalloutStateMachine, Name ]
      Environment:
        Variables:
          CallSqsQueueUrl: !Ref CallSqsQueue
          CalloutStateMachineArn: !Ref CalloutStateMachine      
      Events:
        CallSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CallSqsQueue.Arn
            BatchSize: 1
            
  CallSqsQueue:
    Type: AWS::SQS::Queue
    Properties: 
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt [ CallDeadLetterQueue, Arn ]
        maxReceiveCount: 1
  CallDeadLetterQueue: 
    Type: AWS::SQS::Queue

  CalloutStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  CalloutStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Reading messages from an SQS queue and iteratively processing each message.",
              "StartAt": "Start",
              "States": {
                "Start":{
                  "Type": "Pass",    
                  "Next": "Process Call Messages"
                },
                "Process Call Messages": {
                  "Type": "Map",
                  "Next": "Finish",
                  "InputPath": "$",
                  "ItemsPath": "$",
                  "Iterator": {
                    "StartAt": "Callout with AWS Connect",
                    "States": {
                      "Callout with AWS Connect": {
                        "Type": "Task",
                        "Resource": "arn:aws:lambda:us-east-1:467005446488:function:it114115callout-CalloutFunction-J6DYCOUO4GYQ",
                        "End": true
                      }
                    }
                  }
                },
                "Finish": {
                  "Type": "Succeed"
                }
              }
            }                       
          - 
            CalloutFunction: !GetAtt [ CalloutFunction, Arn ]
      RoleArn: !GetAtt [ CalloutStatesExecutionRole, Arn ]
      
      
Outputs:
  CallSqsQueue:
    Description: "Call Out Queue ARN"
    Value: !GetAtt CallSqsQueue.Arn

