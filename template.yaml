AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  callout
Parameters:
  InstanceArn:
    Type: String
  ContactFlowArn:
    Type: String
  SourcePhoneNumber:
    Type: String
  TimeoutSeconds:
    Type: Number
    Default: 300
Globals:
  Function:
    Timeout: 30
    Tracing: Active
    Runtime: python3.7  
Resources:
  LibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: lib
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete  

  GetCalloutJobFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: get_call_job.lambda_handler
      CodeUri: call_out/
      Policies:
        - AWSLambdaExecute
      Environment:
        Variables:
          ExcelCallTaskBucket: !Ref ExcelCallTaskBucket

  CalloutFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: send_call.lambda_handler
      CodeUri: call_out/
      Layers:
        - !Ref LibLayer
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
               - connect:StartOutboundVoiceContact
              Resource: !Sub ${InstanceArn}/*
            - Effect: Allow
              Action:
               - states:SendTaskSuccess 
              Resource: !Ref CalloutStateMachine                   
      Environment:
        Variables:
          ContactFlowArn: !Ref ContactFlowArn
          SourcePhoneNumber: !Ref SourcePhoneNumber
          AsynCalloutQueueUrl: !Ref AsynCalloutQueue
          ExcelCallTaskBucket: !Ref ExcelCallTaskBucket
      Events:
        CallSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AsynCalloutQueue.Arn
            BatchSize: 1
            
  StartCallOutFlowFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: start_call_out_flow.lambda_handler
      CodeUri: call_out/
      ReservedConcurrentExecutions: 1
      Policies:
        - AWSLambdaExecute      
        - StepFunctionsExecutionPolicy:
            StateMachineName:
              !GetAtt CalloutStateMachine.Name
      Environment:
        Variables:
          CallSqsQueueUrl: !Ref CallSqsQueue
          CalloutStateMachineArn: !Ref CalloutStateMachine
          ResponseHanlderFunctionArn: !GetAtt ResponseHanlderFunction.Arn
          IteratorFunctionArn: !GetAtt IteratorFunction.Arn
          SendTaskSuccessFunctionArn: !GetAtt SendTaskSuccessFunction.Arn
          ExcelCallTaskBucket: !Ref ExcelCallTaskBucket
      Events:
        CallSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CallSqsQueue.Arn
            BatchSize: 1

  ResponseHanlderFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: response_handler.lambda_handler
      CodeUri: call_out/

  SendTaskSuccessFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: send_task_success.lambda_handler
      CodeUri: call_out/
      Policies:
        - AWSLambdaExecute      
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
               - states:SendTaskSuccess
              Resource: !Ref CalloutStateMachine
          
  GetCallResultFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: get_call_result.lambda_handler
      CodeUri: call_out/
      Layers:
        - !Ref LibLayer      
      Policies:
        - AWSLambdaExecute      
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !GetAtt CallResultDynamoDBTable.Arn
      Environment:
        Variables:
          CallResultDynamoDBTable: !Ref CallResultDynamoDBTable
          CallReportBucket: !Ref CallReportBucket
          
  IteratorFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: iterator.lambda_handler
      CodeUri: call_out/

  CreateExcelCallTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create_excel_call_task.lambda_handler
      CodeUri: call_out/
      Layers:
        - !Ref LibLayer
      Policies: 
        - AWSLambdaExecute
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
               - sqs:SendMessage
              Resource: !GetAtt CallSqsQueue.Arn
      Environment:
        Variables:
          CallSqsQueueUrl: !Ref CallSqsQueue
      Events:
        ExcelCallTaskEvent:
          Type: S3
          Properties:
            Bucket: !Ref ExcelCallTaskBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .xlsx
  
  ExcelCallTaskBucket:
    Type: AWS::S3::Bucket     

  CallReportBucket:
    Type: AWS::S3::Bucket 
    
  CallSqsQueue:
    Type: AWS::SQS::Queue
    Properties: 
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt CallDeadLetterQueue.Arn
        maxReceiveCount: 1
  CallDeadLetterQueue: 
    Type: AWS::SQS::Queue
    
  AsynCalloutQueue:
    Type: AWS::SQS::Queue
    Properties: 
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt AsynCalloutDeadLetterQueue.Arn
        maxReceiveCount: 1
  AsynCalloutDeadLetterQueue: 
    Type: AWS::SQS::Queue

  CallResultDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "receiver_id"
          AttributeType: "S"
        -
          AttributeName: "task_id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "task_id"
          KeyType: "HASH"
        -
          AttributeName: "receiver_id"
          KeyType: "RANGE"
        
  CalloutStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt AsynCalloutQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt CallResultDynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt GetCalloutJobFunction.Arn
                  - !GetAtt GetCallResultFunction.Arn
                
                
  CalloutStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Reading messages from an SQS queue and iteratively processing each message.",
              "StartAt": "Start",
              "States": {
                "Start":{
                  "Type": "Pass",    
                  "Next": "Process Call Messages"
                },
                "Process Call Messages": {
                  "Type": "Map",
                  "Next": "Get Call Result",
                  "InputPath": "$",
                  "ItemsPath": "$",
                  "OutputPath": "$.[0]",
                  "Iterator": {
                    "StartAt": "Get Call out job",
                    "States": {
                      "Get Call out job": {
                        "Type": "Task",
                        "Resource": "${GetCalloutJobFunction}",
                        "Next": "Callout with AWS Connect"
                      },
                      "Callout with AWS Connect": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                        "TimeoutSeconds": ${TimeoutSeconds},
                        "Parameters": {
                          "QueueUrl": "${AsynCalloutQueue}",
                          "MessageBody": {
                              "Message.$":"$",
                              "TaskToken.$": "$$.Task.Token"
                           }
                        },
                        "Catch": [ {
                            "ErrorEquals": [ "States.Timeout" ],
                            "ResultPath": null,
                            "Next": "Call Timeout"
                         } ],
                        "Next": "Save call result"
                      },
                      "Call Timeout": {
                        "Type": "Pass",
                        "ResultPath": null,
                        "Next": "Save call result"
                      }, 
                      "Save call result": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::dynamodb:putItem",
                        "Parameters": {
                          "TableName": "${CallResultDynamoDBTable}",
                          "Item": {
                            "receiver_id": {"S.$": "$.receiver_id"},
                            "task_id": {"S.$": "$.task_id"},
                            "username": {"S.$": "$.username"},
                            "phone_number": {"S.$": "$.phone_number"},
                            "status": {"S.$": "$.status"},
                            "answers": {"S.$": "$.answers"},
                            "error": {"S.$": "$.error"},
                            "call_at": {"S.$": "$.call_at"}
                          }
                        },
                        "ResultPath": "$.Result",
                        "OutputPath": "$.task_id",
                        "End": true
                      }
                    }
                  }
                },
                "Get Call Result": {
                  "Type": "Task",
                  "Resource": "${GetCallResultFunction}",
                  "Next": "Finish"
                },
                "Finish": {
                  "Type": "Succeed"
                }
              }
            }                       
          - 
            TimeoutSeconds: !Ref TimeoutSeconds
            AsynCalloutQueue: !Ref AsynCalloutQueue
            CallResultDynamoDBTable: !Ref CallResultDynamoDBTable
            GetCalloutJobFunction: !GetAtt GetCalloutJobFunction.Arn
            GetCallResultFunction: !GetAtt GetCallResultFunction.Arn
      RoleArn: !GetAtt CalloutStatesExecutionRole.Arn
      
      
Outputs:
  CallSqsQueue:
    Description: Call Out Queue ARN
    Value: !GetAtt CallSqsQueue.Arn
  ExcelCallTaskBucket:
    Description: Excel Call Task Bucket
    Value: !Ref ExcelCallTaskBucket
  CallReportBucket:
    Description: Call Report Bucket
    Value: !Ref CallReportBucket
